import pyvital.arr as arr
import numpy as np
import scipy.stats as st

class Histogram:
    def __init__(self, minval=0, maxval=100, resolution=1000):
        self.minval = minval
        self.maxval = maxval
        self.bins = [0] * resolution
        self.total = 0

    def getbin(self, v):
        if v < self.minval:
            return 0
        if v > self.maxval:
            return self.bins[-1]
        bin = int((v-self.minval) / (self.maxval - self.minval) * len(self.bins))
        if bin >= len(self.bins):
            return len(self.bins) - 1
        return bin

    def learn(self, v):
        """
        add tnew data
        """
        bin = self.getbin(v)
        self.bins[bin] += 1
        self.total += 1

    # minimum value -> 0, maximum value -> 1
    def percentile(self, v):
        if self.total == 0:
            return 0
        # number of values less than the value
        cnt = 0
        bin = self.getbin(v)
        for i in range(bin):
            cnt += self.bins[i]
        return cnt / self.total * 100


cfg = {
    'name': 'PLETH - Surgical Pleth Index',
    'group': 'Medical algorithms',
    'reference': 'Br J Anaesth. 2007 Apr98(4):447-55',
    'interval': 30, # for 4096 sample/call
    'overlap': 3, # 2 sec overlap for HR=30
    'inputs': [{'name': 'PLETH', 'type': 'wav'}],
    'outputs': [
        {'name': 'BEAT', 'type': 'num', 'max':2},
        {'name': 'PPGA', 'type': 'num', 'min':0, 'max':100},
        {'name': 'HBI', 'type': 'num', 'min':240, 'max':2000},
        {'name': 'PPGA_PERC', 'type': 'num', 'min':0, 'max':100},
        {'name': 'HBI_PERC', 'type': 'num', 'min':0, 'max':100},
        {'name': 'SPI', 'type': 'num', 'max':100}
        ]
}


# filter should be called sequentially
hist_ppga = Histogram(0, 100, 1000)
hist_hbi = Histogram(240, 2000, 1000)  # HR 30-250 --> HBI 240-2000

# 100- spi = 0.7*ppga + 0.3*hbi
# ppga = 0.7 * ppga_ind + 0.3 * ppga_grp
# hbi = 0.7 * hbi_ind + 0.3 * hbi_grp
# 100 - spi - 0.49 ppga_ind - 0.21 hbi_ind = 0.21 ppga_grp + 0.09 hbi_grp

# hist_ppga_grp = Histogram(0, 15, 1000)
# hist_ppga_grp.bins = [43,68,35,43,28,44,45,60,40,54,62,89,92,151,106,189,145,341,192,301,323,441,227,590,572,871,430,665,459,808,402,756,425,800,483,963,576,1214,638,879,1042,1481,825,1721,882,1679,825,1313,1079,804,1482,1362,721,1220,960,1339,898,880,1440,1723,815,1525,1031,1630,1092,1235,1519,1827,930,1937,959,1857,994,1394,1459,1913,956,1731,947,1310,1343,863,1655,1753,801,1728,834,1683,807,1466,940,1559,773,1521,812,1267,1020,986,1477,949,1530,1531,754,1435,795,1293,832,1044,927,1259,611,1068,708,828,915,612,996,1047,493,1012,483,953,541,888,636,973,508,917,644,779,684,595,768,822,410,827,435,858,426,798,394,631,544,748,412,419,685,514,615,390,777,738,396,791,400,684,398,792,393,624,676,854,515,415,822,590,688,828,424,810,438,748,404,663,456,696,354,475,555,591,419,353,671,637,363,684,309,618,314,637,340,508,496,616,344,356,674,605,409,335,713,651,340,674,335,657,360,679,366,491,458,605,345,336,560,444,387,570,239,535,286,567,287,478,309,488,241,344,442,469,281,342,512,513,266,559,266,495,319,586,285,477,385,564,280,404,440,527,336,298,535,582,296,534,273,486,329,543,274,425,373,488,246,299,426,404,342,539,224,332,349,435,225,377,264,423,205,229,458,434,226,279,364,342,294,427,234,373,238,393,190,214,383,436,184,268,351,369,252,197,391,441,195,404,175,265,331,406,181,293,281,305,193,183,293,342,181,332,157,214,227,277,133,256,168,285,138,132,265,286,159,187,201,211,181,278,118,258,126,250,127,154,224,254,115,162,207,190,152,117,233,231,112,240,107,139,162,206,104,177,118,204,112,110,213,204,102,190,94,160,144,196,110,203,93,205,95,109,180,162,108,133,135,135,126,149,94,166,89,148,82,102,140,210,94,163,122,146,103,87,159,155,83,150,73,107,116,158,70,150,95,114,91,99,150,147,87,144,70,100,111,163,72,130,87,134,76,86,96,130,62,101,80,109,83,137,64,113,71,118,87,59,85,126,74,84,67,104,85,53,103,120,47,102,69,82,111,127,60,114,59,84,62,59,102,96,54,115,48,66,83,114,52,105,80,133,75,67,106,111,68,103,94,85,72,118,60,138,68,134,63,78,118,121,55,116,87,113,78,102,131,137,67,104,56,94,90,122,60,102,53,87,82,85,111,131,51,105,62,78,96,119,57,100,61,80,66,73,88,82,54,73,61,58,84,96,47,76,42,63,64,72,77,87,42,75,59,82,51,46,89,81,41,75,38,39,69,77,31,65,40,44,77,67,52,71,29,41,58,41,45,62,31,76,31,62,37,23,62,50,20,54,21,32,51,45,24,69,21,34,43,39,34,35,21,33,21,23,31,17,29,42,24,28,20,15,35,39,24,42,18,22,31,18,22,36,15,30,24,34,38,46,18,41,12,37,23,8,33,34,17,32,15,17,25,26,22,27,11,18,22,23,26,32,13,32,15,24,29,15,45,41,19,33,16,19,27,34,18,38,14,30,29,16,30,32,14,36,16,29,22,39,7,27,12,27,14,12,23,32,17,29,15,10,33,18,16,34,12,21,20,21,19,32,15,20,24,27,15,20,25,23,8,37,18,17,28,21,9,29,12,12,24,17,15,22,10,18,17,26,8,19,7,18,11,15,12,9,17,21,6,15,5,6,10,13,8,9,6,12,8,5,6,18,7,8,9,4,5,4,7,5,1,6,5,5,7,9,1,8,3,3,6,2,6,6,3,3,2,6,1,3,1,3,4,1,2,1,4,3,1,3,4,2,5,3,0,3,5,2,2,1,4,1,0,0,2,4,1,3,5,1,5,2,2,6,2,3,2,3,0,2,0,2,2,3,1,2,1,1,0,1,2,0,3,2,0,1,1,2,0,2,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,2,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1]
# hist_hbi_grp = Histogram(240, 2000, 1000)
# hist_hbi_grp.bins = [53,144,89,111,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,7,0,0,0,0,0,15,0,0,0,0,0,103,0,0,0,0,439,0,0,0,0,0,699,0,0,0,0,0,1081,0,0,0,0,1230,0,0,0,0,0,2369,0,0,0,0,0,1965,0,0,0,0,2074,0,0,0,0,0,2585,0,0,0,0,0,3365,0,0,0,0,3766,0,0,0,0,0,3885,0,0,0,0,0,3654,0,0,0,0,4443,0,0,0,0,0,5086,0,0,0,0,0,4381,0,0,0,0,3745,0,0,0,0,0,4066,0,0,0,0,0,4878,0,0,0,0,5697,0,0,0,0,0,6116,0,0,0,0,0,6970,0,0,0,0,0,7675,0,0,0,0,7525,0,0,0,0,0,8090,0,0,0,0,0,7772,0,0,0,0,8642,0,0,0,0,0,6911,0,0,0,0,0,5336,0,0,0,0,5214,0,0,0,0,0,6342,0,0,0,0,0,5083,0,0,0,0,4136,0,0,0,0,0,4002,0,0,0,0,0,3735,0,0,0,0,3430,0,0,0,0,0,3138,0,0,0,0,0,3089,0,0,0,0,3179,0,0,0,0,0,2903,0,0,0,0,0,3043,0,0,0,0,3107,0,0,0,0,0,3104,0,0,0,0,0,2871,0,0,0,0,0,2636,0,0,0,0,2367,0,0,0,0,0,2201,0,0,0,0,0,2074,0,0,0,0,1945,0,0,0,0,0,2043,0,0,0,0,0,1994,0,0,0,0,2040,0,0,0,0,0,2228,0,0,0,0,0,2641,0,0,0,0,3010,0,0,0,0,0,2916,0,0,0,0,0,2459,0,0,0,0,2151,0,0,0,0,0,1957,0,0,0,0,0,1787,0,0,0,0,1824,0,0,0,0,0,1589,0,0,0,0,0,1234,0,0,0,0,1022,0,0,0,0,0,997,0,0,0,0,0,1001,0,0,0,0,0,867,0,0,0,0,839,0,0,0,0,0,866,0,0,0,0,0,851,0,0,0,0,681,0,0,0,0,0,492,0,0,0,0,0,398,0,0,0,0,360,0,0,0,0,0,287,0,0,0,0,0,222,0,0,0,0,197,0,0,0,0,0,151,0,0,0,0,0,107,0,0,0,0,100,0,0,0,0,0,91,0,0,0,0,0,74,0,0,0,0,52,0,0,0,0,0,47,0,0,0,0,0,57,0,0,0,0,31,0,0,0,0,0,36,0,0,0,0,0,35,0,0,0,0,0,31,0,0,0,0,31,0,0,0,0,0,27,0,0,0,0,0,19,0,0,0,0,27,0,0,0,0,0,32,0,0,0,0,0,24,0,0,0,0,16,0,0,0,0,0,20,0,0,0,0,0,20,0,0,0,0,21,0,0,0,0,0,21,0,0,0,0,0,20,0,0,0,0,16,0,0,0,0,0,24,0,0,0,0,0,8,0,0,0,0,10,0,0,0,0,0,17,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,0,14,0,0,0,0,0,16,0,0,0,0,0,12,0,0,0,0,16,0,0,0,0,0,6,0,0,0,0,0,14,0,0,0,0,24,0,0,0,0,0,19,0,0,0,0,0,15,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,16,0,0,0,0,7,0,0,0,0,0,18,0,0,0,0,0,13,0,0,0,0,11,0,0,0,0,0,12,0,0,0,0,0,11,0,0,0,0,13,0,0,0,0,0,8,0,0,0,0,0,10,0,0,0,0,9,0,0,0,0,0,4,0,0,0,0,0,6,0,0,0,0,0,12,0,0,0,0,14,0,0,0,0,0,16,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,12,0,0,0,0,0,14,0,0,0,0,8,0,0,0,0,0,10,0,0,0,0,0,13,0,0,0,0,9,0,0,0,0,0,5,0,0,0,0,0,5,0,0,0,0,9,0,0,0,0,0,4,0,0,0,0,0,7,0,0,0,0,14,0,0,0,0,0,10,0,0,0,0,0,7,0,0,0,0,12,0,0,0,0,0,7,0,0,0,0,0,5,0,0,0,0,4]

def run(inp, opt, cfg):
    """
    http:#ocw.utm.my/file.php/38/SEB4223/07_ECG_Analysis_1_-_QRS_Detection.ppt%20%5BCompatibility%20Mode%5D.pdf
    """
    global hist_ppga, hist_hbi
    trk_name = [k for k in inp][0]
    
    if 'srate' not in inp[trk_name]:
        return

    data = arr.interp_undefined(inp[trk_name]['vals'])
    srate = inp[trk_name]['srate']

    minlist, maxlist = arr.detect_peaks(data, srate)  # extract beats
    beat_res = [{'dt':idx / srate, 'val':1} for idx in maxlist]

    ppga_res = []
    hbi_res = []
    ppga_perc_res = []
    hbi_perc_res = []
    spi_res = []
    for i in range(len(maxlist) - 1):
        dt = maxlist[i+1] / srate

        hbi = (maxlist[i+1] - maxlist[i]) / srate * 1000
        ppga = data[maxlist[i+1]] - data[minlist[i]]

        #hbi_perc = hist_hbi.percentile(hbi) * 0.7 + st.norm.cdf(hbi, 754.7, 210.8) * 30
        hbi_perc = hist_hbi.percentile(hbi) * 0.7 + st.norm.cdf(hbi, 700, 100) * 30
        #ppga_perc = hist_ppga.percentile(ppga) * 0.7 + st.norm.cdf(ppga, 2.428, 1.896) * 30
        ppga_perc = hist_ppga.percentile(ppga) * 0.7 + st.norm.cdf(ppga, 1, 0.2) * 30
        # hbi_perc = hist_hbi.percentile(hbi) * 0.7 + hist_hbi_grp.percentile(hbi) * 0.3
        # ppga_perc = hist_ppga.percentile(ppga) * 0.7 + hist_ppga_grp.percentile(ppga) * 0.3

        spi = 100 - (0.7 * ppga_perc + 0.3 * hbi_perc)
        
        ppga_res.append({'dt': dt, 'val': ppga})
        hbi_res.append({'dt': dt, 'val': hbi})
        ppga_perc_res.append({'dt': dt, 'val': ppga_perc})
        hbi_perc_res.append({'dt': dt, 'val': hbi_perc})
        spi_res.append({'dt':dt, 'val':spi})

        hist_hbi.learn(hbi)
        hist_ppga.learn(ppga)

    return [beat_res, ppga_res, hbi_res, ppga_perc_res, hbi_perc_res, spi_res]
